SHADER fxaa
    VERTEX
        INPUTS apos:4 atc:2
        UNIFORMS mvp framebuffer_size
        const float FXAA_SUBPIX_SHIFT = 1.0 / 4.0;
        gl_Position = mvp * apos;
        vec2 rcpFrame = vec2(1.0) / framebuffer_size;
        ipos.xy = atc.xy;
        ipos.zw = atc.xy - (rcpFrame * (0.5 + FXAA_SUBPIX_SHIFT));
    PIXEL
        INPUTS ipos:4
        UNIFORMS tex0 framebuffer_size
        vec2 rcpFrame = vec2(1.0) / framebuffer_size;
        const float FXAA_REDUCE_MIN = 1.0 / 128.0;
        const float FXAA_SPAN_MAX = 8.0;
        const float FXAA_REDUCE_MUL = 1.0 / 8.0;
        vec3 rgbNW = textureLod(tex0, ipos.zw, 0.0).xyz;
        vec3 rgbNE = textureLodOffset(tex0, ipos.zw, 0.0, ivec2(1,0)).xyz;
        vec3 rgbSW = textureLodOffset(tex0, ipos.zw, 0.0, ivec2(0,1)).xyz;
        vec3 rgbSE = textureLodOffset(tex0, ipos.zw, 0.0, ivec2(1,1)).xyz;
        vec3 rgbM  = textureLod(tex0, ipos.xy, 0.0).xyz;
        vec3 luma = vec3(0.299, 0.587, 0.114);
        float lumaNW = dot(rgbNW, luma);
        float lumaNE = dot(rgbNE, luma);
        float lumaSW = dot(rgbSW, luma);
        float lumaSE = dot(rgbSE, luma);
        float lumaM  = dot(rgbM,  luma);
        float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
        float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
        vec2 dir = vec2(-((lumaNW + lumaNE) - (lumaSW + lumaSE)),
                         ((lumaNW + lumaSW) - (lumaNE + lumaSE)));
        float dirReduce = max(
            (lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),
            FXAA_REDUCE_MIN);
        float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);
        dir = min(vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),
                max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
                  dir * rcpDirMin)) * rcpFrame.xy;
        vec3 rgbA = (1.0 / 2.0) * (
            textureLod(tex0, ipos.xy + dir * (1.0 / 3.0 - 0.5), 0.0).xyz +
            textureLod(tex0, ipos.xy + dir * (2.0 / 3.0 - 0.5), 0.0).xyz);
        vec3 rgbB = rgbA * (1.0 / 2.0) + (1.0 / 4.0) * (
            textureLod(tex0, ipos.xy + dir * (0.0 / 3.0 - 0.5), 0.0).xyz +
            textureLod(tex0, ipos.xy + dir * (3.0 / 3.0 - 0.5), 0.0).xyz);
        float lumaB = dot(rgbB, luma);
        frag_color = vec4((lumaB < lumaMin) || (lumaB > lumaMax) ? rgbA : rgbB, 1.0);
