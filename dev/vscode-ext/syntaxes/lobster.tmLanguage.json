{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "fileTypes": [
    "lobster"
  ],
  "name": "Lobster",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#statements"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#digits"
    },
    {
      "include": "#ident"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.source.lobster",
          "match": "\\b(member|member_frame|static|static_frame|attribute|break|return|struct|class|import|namespace|pakfile|def|is|from|program|private|enum|enum_flags|typeof|var|let|not|and|or)\\b"
        },
        {
          "name": "storage.type.source.lobster",
          "match": "\\b(int|float|string|bool|void|resource)\\b"
        },
        {
          "name": "constant.language.source.lobster",
          "match": "\\b(nil|true|false)\\b"
        },
        {
          "name": "keyword.control.source.lobster",
          "match": "\\b(break|return|from)\\b"
        },
        {
          "name": "keyword.control.source.lobster",
          "match": "\\b(else|elif)\\b"
        },
        {
          "name": "keyword.control.source.lobster",
          "match": "\\b(if|while|switch|case|default|collectwhile|for|filter|exists|map)\\b"
        },
        {
          "name": "support.function.source.lobster",
          "match": "\\b(print|string|set_print_depth|set_print_length|set_print_quoted|set_print_decimals|set_print_indent|get_line|append|vector_reserve|length|length|length|equal|push|pop|top|insert|remove|remove_obj|binary_search|binary_search|binary_search|copy|slice|any|any|all|all|substring|string_to_int|string_to_float|tokenize|unicode_to_string|string_to_unicode|number_to_string|lowercase|uppercase|escape_string|concat_string|repeat_string|pow|pow|pow|log|sqrt|ceiling|ceiling|floor|floor|int|int|round|round|fraction|fraction|float|float|sin|cos|tan|sincos|asin|acos|atan|radians|degrees|atan2|radians|degrees|normalize|dot|magnitude|manhattan|cross|rnd|rnd|rnd_float|rnd_gaussian|rnd_seed|div|clamp|clamp|clamp|clamp|in_range|in_range|in_range|abs|abs|abs|abs|sign|sign|sign|sign|min|min|min|min|min|min|min|min|max|max|max|max|max|max|max|max|lerp|lerp|cardinal_spline|line_intersect|circles_within_range|wave_function_collapse|resume|return_value|active|hash|hash|program_name|vm_compiled_mode|seconds_elapsed|assert|trace_bytecode|set_max_stack_size|reference_count|set_console|command_line_arguments|thread_information|is_worker_thread|start_worker_threads|stop_worker_threads|workers_alive|thread_write|thread_read|compile_run_code|compile_run_file|scan_folder|read_file|write_file|ensure_size|write_int64_le|write_int32_le|write_int16_le|write_int8_le|write_float64_le|write_float32_le|write_int64_le_back|write_int32_le_back|write_int16_le_back|write_int8_le_back|write_float64_le_back|write_float32_le_back|write_substring|write_substring_back|compare_substring|read_int64_le|read_int32_le|read_int16_le|read_int8_le|read_float64_le|read_float32_le|read_int64_le_back|read_int32_le_back|read_int16_le_back|read_int8_le_back|read_float64_le_back|read_float32_le_back|flatbuffers_field_int64|flatbuffers_field_int32|flatbuffers_field_int16|flatbuffers_field_int8|flatbuffers_field_float64|flatbuffers_field_float32|flatbuffers_field_string|flatbuffers_field_vector_len|flatbuffers_field_vector|flatbuffers_field_table|flatbuffers_field_struct|flatbuffers_indirect|flatbuffers_string|flatbuffers_binary_to_json|flatbuffers_json_to_binary|parse_data|gl_window|gl_require_version|gl_load_materials|gl_frame|gl_log_frame|gl_shutdown|gl_window_title|gl_window_min_max|gl_visible|gl_cursor|gl_grab|gl_button|gl_touchscreen|gl_dpi|gl_window_size|gl_mouse_pos|gl_mouse_delta|gl_local_mouse_pos|gl_last_pos|gl_local_last_pos|gl_mousewheel_delta|gl_joy_axis|gl_delta_time|gl_time|gl_last_time|gl_clear|gl_color|gl_polygon|gl_circle|gl_open_circle|gl_unit_cube|gl_rotate_x|gl_rotate_y|gl_rotate_z|gl_translate|gl_scale|gl_scale|gl_origin|gl_scaling|gl_model_view_projection|gl_point_scale|gl_line_mode|gl_hit|gl_rect|gl_rect_tc_col|gl_unit_square|gl_line|gl_perspective|gl_ortho|gl_ortho3d|gl_new_poly|gl_new_mesh|gl_new_mesh_iqm|gl_mesh_parts|gl_mesh_size|gl_animate_mesh|gl_render_mesh|gl_save_mesh|gl_set_shader|gl_set_uniform|gl_set_uniform|gl_set_uniform_array|gl_set_uniform_matrix|gl_uniform_buffer_object|gl_uniform_buffer_object|gl_delete_buffer_object|gl_bind_mesh_to_compute|gl_dispatch_compute|gl_dump_shader|gl_blend|gl_load_texture|gl_set_primitive_texture|gl_set_mesh_texture|gl_set_image_texture|gl_create_texture|gl_create_blank_texture|gl_texture_size|gl_read_texture|gl_switch_to_framebuffer|gl_light|gl_render_tiles|gl_debug_grid|gl_screenshot|gl_set_font_name|gl_set_font_size|gl_set_max_font_size|gl_get_font_size|gl_get_outline_size|gl_text|gl_text_size|gl_get_glyph_name|gl_get_char_code|play_wav|play_sfxr|ph_initialize|ph_create_box|ph_create_circle|ph_create_polygon|ph_dynamic|ph_set_color|ph_set_shader|ph_set_texture|ph_get_position|ph_create_particle|ph_create_particle_circle|ph_initialize_particles|ph_step|ph_particle_contacts|ph_raycast|ph_delete_particle|ph_getparticle_position|ph_render|ph_render_particles|simplex|mg_sphere|mg_cube|mg_cylinder|mg_tapered_cylinder|mg_superquadric|mg_superquadric_non_uniform|mg_supertoroid|mg_landscape|mg_set_polygon_reduction|mg_set_color_noise|mg_set_vertex_randomize|mg_set_point_mode|mg_polygonize|mg_translate|mg_scale|mg_scale_vec|mg_rotate|mg_color|mg_smooth|cg_init|cg_size|cg_set|cg_copy|cg_color_to_palette|cg_palette_to_color|cg_copy_palette|cg_resample_half|cg_create_mesh|cg_create_3d_texture|cg_load_vox|cg_save_vox|cg_get_buf|cg_average_surface_color|cg_rotate|oc_world_bits|oc_buf|oc_load|oc_save|oc_new|oc_set|oc_get|vr_init|vr_start_eye|vr_start|vr_finish|vr_set_eye_texture|vr_num_motion_controllers|vr_motioncontrollerstracking|vr_motion_controller|vr_create_motion_controller_mesh|vr_motion_controller_button|vr_motion_controller_vec|vr_hmd_vec|steam_init|steam_overlay|steam_username|steam_unlock_achievement|steam_write_file|steam_read_file|im_init|im_add_font|im_frame|im_window_demo|im_window|im_button|im_same_line|im_separator|im_text|im_tooltip|im_checkbox|im_input_text|im_radio|im_combo|im_listbox|im_sliderint|im_sliderfloat|im_coloredit|im_treenode|im_group|im_edit_anything|im_graph|im_show_vars|im_show_engine_stats)\\b"
        },
        {
          "name": "keyword.control.source.lobster",
          "match": "\\b(forever|fold|reduce|connect|reducerev|filterindices|find|reverse|split|qsort|qsort_in_place|insertion_sort|nest_if|return_after|forbias|forscale|forrange|forrangeincl|try|catch|throw|protect|forxy|mapxy)\\b"
        },
        {
          "name": "support.function.source.lobster",
          "match": "\\b(sum|product|zip|reverselist|in_range|collect|fatal|check|allint|vecfromyawpitch|inrange2d|rotate2D|camera_FPS_update|camera_FPS_view|camera_direction|camera_2d_worldspace)\\b"
        },
        {
          "name": "support.type.source.lobster",
          "match": "\\b(xy|xy_i|xy_f|xyz|xyz_i|xyz_f|xyzw|xyzw_i|xyzw_f|color)\\b"
        },
        {
          "name": "support.constant.source.lobster",
          "match": "\\b(xy_0|xy_1|xy_h|xy_x|xy_y|xy_z|xy_w|xy_xy|xy_0i|xy_1i|xy_xi|xy_yi|xy_zi|xy_wi|color_black|color_white|color_red|color_green|color_blue|color_yellow|color_cyan|color_pink|color_grey|color_dark_grey|color_light_grey|color_lightest_grey|color_darkest_grey|color_dark_red|color_dark_green|color_dark_blue|color_light_red|color_light_green|color_light_blue|color_olive|color_teal|color_purple|color_orange|color_chartreuse|color_springgreen|color_dodgerblue|color_pink_violet|color_blue_violet)\\b"
        },
        {
          "match": "(?<![+])\\+{1,2}|(?<![-])\\-{1,2}|\\+=|-=|%|%\\=|\\*|\\*\\=|\\/|\\/\\=|\\^|==?|\\!=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)",
          "name": "keyword.operator.lobster"
        }
      ]
    },
    "statements": {
      "patterns": [
        {
          "name": "variable.assignment.lobster",
          "begin": "\\b(let|var)\\s+",
          "beginCaptures": {
            "1": {
              "name": "storage.type.lobster"
            }
          },
          "end": "=",
          "endCaptures": {
            "0": {
              "name": "punctuation.defintition.lobster"
            }
          },
          "patterns": [
            {
              "name": "variable.name.lobster",
              "match": "[a-zA-Z_][a-zA-Z0-9_]*"
            },
            {
              "name": "punctuation.separator.arguments.lobster",
              "match": ","
            }
          ]
        },
        {
          "name": "support.function.definition.lobster",
          "begin": "\\b(def)\\s+([A-Za-z_][A-Za-z0-9_]*)(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.lobster"
            },
            "2": {
              "name": "entity.name.function.lobster"
            },
            "3": {
              "name": "punctuation.definition.parameters.begin.lobster"
            }
          },
          "end": "\\)(?:\\s*->\\s*)?([A-Za-z_][A-Za-z0-9_]*)?:",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.end.lobster"
            },
            "1": {
              "name": "storage.type.source.lobster"
            }
          },
          "patterns": [
            {
              "name": "variable.parameter.function.lobster",
              "match": "[A-Za-z_][A-Za-z0-9_]*"
            },
            {
              "match": "(?<![:]):{,2}(int|float|string|resource|any|void|[A-Za-z_][A-Za-z0-9_]*)",
              "captures": {
                "1": {
                  "name": "storage.type.source.lobster"
                }
              }
            },
            {
              "name": "punctuation.separator.arguments.lobster",
              "match": ","
            }
          ]
        },
        {
          "name": "support.class.definition.lobster",
          "begin": "\\b(class|struct)\\s+([A-Za-z_][A-Za-z0-9_]*)",
          "beginCaptures": {
            "1": {
              "name": "support.class.lobster"
            },
            "2": {
              "name": "entity.name.class.lobster"
            }
          },
          "end": ":"
        },
        {
          "name": "meta.enum.definition.lobster",
          "begin": "\\b(enum|enum_flags)\\s+(\\w+)",
          "beginCaptures": {
            "1": {
              "name": "support.modifier.lobster"
            },
            "2": {
              "name": "entity.name.type.enum.lobster"
            }
          },
          "end": ":",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.enum.end.lobster"
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.triple.lobster",
          "begin": "\"{3}",
          "end": "\"{3}"
        },
        {
          "name": "string.quoted.double.lobster",
          "begin": "\"",
          "end": "\""
        },
        {
          "name": "constant.character.escape.lobster",
          "match": "'(\\\\n|\\\\t|\\\\r|\\\\\"|\\\\'|\\\\x\\h{2}|\\w|\\\\|)'"
        }
      ]
    },
    "digits": {
      "patterns": [
        {
          "name": "constant.numeric.hex.lobster",
          "match": "(?<![\\w\\d.])0x\\h+"
        },
        {
          "name": "constant.numeric.integer.lobster",
          "match": "(?<![\\w\\d.])\\d+(?![.])"
        },
        {
          "name": "constant.numeric.float.lobster",
          "match": "(\\d+)?\\.(\\d+)?"
        }
      ]
    },
    "ident": {
      "patterns": [
        {
          "name": "variable.source.lobster",
          "match": "[A-Za-z_][A-Za-z0-9_]*"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "/\\*",
          "end": "\\*/",
          "name": "comment.block.source.lobster"
        },
        {
          "name": "comment.line.double-slash.lobster",
          "match": "//.*$"
        }
      ]
    }
  },
  "scopeName": "source.lobster",
  "uuid": "663fc343-f01e-4725-8095-d24d49e45079"
}